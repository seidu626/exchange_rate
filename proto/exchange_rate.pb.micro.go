// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/exchange_rate.proto

package exchange_rate

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/anypb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExchangeRates service

func NewExchangeRatesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExchangeRates service

type ExchangeRatesService interface {
	GetRate(ctx context.Context, in *CurrencyRateRequest, opts ...client.CallOption) (*CurrencyRateResponse, error)
	// ListCurrencies returns a list of all currencies
	ListCurrencies(ctx context.Context, in *ListCurrencyRequest, opts ...client.CallOption) (*ListCurrencyResponse, error)
	// ListRates returns the exchange rates of other currencies based on the base currency
	ListRates(ctx context.Context, in *ListRatesRequest, opts ...client.CallOption) (*ListRatesResponse, error)
	// Subscription bidirectional streaming service to get updated rates
	Subscription(ctx context.Context, opts ...client.CallOption) (ExchangeRates_SubscriptionService, error)
}

type exchangeRatesService struct {
	c    client.Client
	name string
}

func NewExchangeRatesService(name string, c client.Client) ExchangeRatesService {
	return &exchangeRatesService{
		c:    c,
		name: name,
	}
}

func (c *exchangeRatesService) GetRate(ctx context.Context, in *CurrencyRateRequest, opts ...client.CallOption) (*CurrencyRateResponse, error) {
	req := c.c.NewRequest(c.name, "ExchangeRates.GetRate", in)
	out := new(CurrencyRateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesService) ListCurrencies(ctx context.Context, in *ListCurrencyRequest, opts ...client.CallOption) (*ListCurrencyResponse, error) {
	req := c.c.NewRequest(c.name, "ExchangeRates.ListCurrencies", in)
	out := new(ListCurrencyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesService) ListRates(ctx context.Context, in *ListRatesRequest, opts ...client.CallOption) (*ListRatesResponse, error) {
	req := c.c.NewRequest(c.name, "ExchangeRates.ListRates", in)
	out := new(ListRatesResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesService) Subscription(ctx context.Context, opts ...client.CallOption) (ExchangeRates_SubscriptionService, error) {
	req := c.c.NewRequest(c.name, "ExchangeRates.Subscription", &ListRatesRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &exchangeRatesServiceSubscription{stream}, nil
}

type ExchangeRates_SubscriptionService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListRatesRequest) error
	Recv() (*ListRatesResponse, error)
}

type exchangeRatesServiceSubscription struct {
	stream client.Stream
}

func (x *exchangeRatesServiceSubscription) Close() error {
	return x.stream.Close()
}

func (x *exchangeRatesServiceSubscription) Context() context.Context {
	return x.stream.Context()
}

func (x *exchangeRatesServiceSubscription) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exchangeRatesServiceSubscription) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exchangeRatesServiceSubscription) Send(m *ListRatesRequest) error {
	return x.stream.Send(m)
}

func (x *exchangeRatesServiceSubscription) Recv() (*ListRatesResponse, error) {
	m := new(ListRatesResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ExchangeRates service

type ExchangeRatesHandler interface {
	GetRate(context.Context, *CurrencyRateRequest, *CurrencyRateResponse) error
	// ListCurrencies returns a list of all currencies
	ListCurrencies(context.Context, *ListCurrencyRequest, *ListCurrencyResponse) error
	// ListRates returns the exchange rates of other currencies based on the base currency
	ListRates(context.Context, *ListRatesRequest, *ListRatesResponse) error
	// Subscription bidirectional streaming service to get updated rates
	Subscription(context.Context, ExchangeRates_SubscriptionStream) error
}

func RegisterExchangeRatesHandler(s server.Server, hdlr ExchangeRatesHandler, opts ...server.HandlerOption) error {
	type exchangeRates interface {
		GetRate(ctx context.Context, in *CurrencyRateRequest, out *CurrencyRateResponse) error
		ListCurrencies(ctx context.Context, in *ListCurrencyRequest, out *ListCurrencyResponse) error
		ListRates(ctx context.Context, in *ListRatesRequest, out *ListRatesResponse) error
		Subscription(ctx context.Context, stream server.Stream) error
	}
	type ExchangeRates struct {
		exchangeRates
	}
	h := &exchangeRatesHandler{hdlr}
	return s.Handle(s.NewHandler(&ExchangeRates{h}, opts...))
}

type exchangeRatesHandler struct {
	ExchangeRatesHandler
}

func (h *exchangeRatesHandler) GetRate(ctx context.Context, in *CurrencyRateRequest, out *CurrencyRateResponse) error {
	return h.ExchangeRatesHandler.GetRate(ctx, in, out)
}

func (h *exchangeRatesHandler) ListCurrencies(ctx context.Context, in *ListCurrencyRequest, out *ListCurrencyResponse) error {
	return h.ExchangeRatesHandler.ListCurrencies(ctx, in, out)
}

func (h *exchangeRatesHandler) ListRates(ctx context.Context, in *ListRatesRequest, out *ListRatesResponse) error {
	return h.ExchangeRatesHandler.ListRates(ctx, in, out)
}

func (h *exchangeRatesHandler) Subscription(ctx context.Context, stream server.Stream) error {
	return h.ExchangeRatesHandler.Subscription(ctx, &exchangeRatesSubscriptionStream{stream})
}

type ExchangeRates_SubscriptionStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ListRatesResponse) error
	Recv() (*ListRatesRequest, error)
}

type exchangeRatesSubscriptionStream struct {
	stream server.Stream
}

func (x *exchangeRatesSubscriptionStream) Close() error {
	return x.stream.Close()
}

func (x *exchangeRatesSubscriptionStream) Context() context.Context {
	return x.stream.Context()
}

func (x *exchangeRatesSubscriptionStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *exchangeRatesSubscriptionStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *exchangeRatesSubscriptionStream) Send(m *ListRatesResponse) error {
	return x.stream.Send(m)
}

func (x *exchangeRatesSubscriptionStream) Recv() (*ListRatesRequest, error) {
	m := new(ListRatesRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
