// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: proto/exchange_rate.proto

package exchange_rate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExchangeRatesClient is the client API for ExchangeRates service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExchangeRatesClient interface {
	GetRate(ctx context.Context, in *CurrencyRateRequest, opts ...grpc.CallOption) (*CurrencyRateResponse, error)
	// ListCurrencies returns a list of all currencies
	ListCurrencies(ctx context.Context, in *ListCurrencyRequest, opts ...grpc.CallOption) (*ListCurrencyResponse, error)
	// ListRates returns the exchange rates of other currencies based on the base currency
	ListRates(ctx context.Context, in *ListRatesRequest, opts ...grpc.CallOption) (*ListRatesResponse, error)
	// Subscription bidirectional streaming service to get updated rates
	Subscription(ctx context.Context, opts ...grpc.CallOption) (ExchangeRates_SubscriptionClient, error)
}

type exchangeRatesClient struct {
	cc grpc.ClientConnInterface
}

func NewExchangeRatesClient(cc grpc.ClientConnInterface) ExchangeRatesClient {
	return &exchangeRatesClient{cc}
}

func (c *exchangeRatesClient) GetRate(ctx context.Context, in *CurrencyRateRequest, opts ...grpc.CallOption) (*CurrencyRateResponse, error) {
	out := new(CurrencyRateResponse)
	err := c.cc.Invoke(ctx, "/exchange_rate.ExchangeRates/GetRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesClient) ListCurrencies(ctx context.Context, in *ListCurrencyRequest, opts ...grpc.CallOption) (*ListCurrencyResponse, error) {
	out := new(ListCurrencyResponse)
	err := c.cc.Invoke(ctx, "/exchange_rate.ExchangeRates/ListCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesClient) ListRates(ctx context.Context, in *ListRatesRequest, opts ...grpc.CallOption) (*ListRatesResponse, error) {
	out := new(ListRatesResponse)
	err := c.cc.Invoke(ctx, "/exchange_rate.ExchangeRates/ListRates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeRatesClient) Subscription(ctx context.Context, opts ...grpc.CallOption) (ExchangeRates_SubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &ExchangeRates_ServiceDesc.Streams[0], "/exchange_rate.ExchangeRates/Subscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &exchangeRatesSubscriptionClient{stream}
	return x, nil
}

type ExchangeRates_SubscriptionClient interface {
	Send(*ListRatesRequest) error
	Recv() (*ListRatesResponse, error)
	grpc.ClientStream
}

type exchangeRatesSubscriptionClient struct {
	grpc.ClientStream
}

func (x *exchangeRatesSubscriptionClient) Send(m *ListRatesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *exchangeRatesSubscriptionClient) Recv() (*ListRatesResponse, error) {
	m := new(ListRatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeRatesServer is the server API for ExchangeRates service.
// All implementations must embed UnimplementedExchangeRatesServer
// for forward compatibility
type ExchangeRatesServer interface {
	GetRate(context.Context, *CurrencyRateRequest) (*CurrencyRateResponse, error)
	// ListCurrencies returns a list of all currencies
	ListCurrencies(context.Context, *ListCurrencyRequest) (*ListCurrencyResponse, error)
	// ListRates returns the exchange rates of other currencies based on the base currency
	ListRates(context.Context, *ListRatesRequest) (*ListRatesResponse, error)
	// Subscription bidirectional streaming service to get updated rates
	Subscription(ExchangeRates_SubscriptionServer) error
	mustEmbedUnimplementedExchangeRatesServer()
}

// UnimplementedExchangeRatesServer must be embedded to have forward compatible implementations.
type UnimplementedExchangeRatesServer struct {
}

func (UnimplementedExchangeRatesServer) GetRate(context.Context, *CurrencyRateRequest) (*CurrencyRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRate not implemented")
}
func (UnimplementedExchangeRatesServer) ListCurrencies(context.Context, *ListCurrencyRequest) (*ListCurrencyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCurrencies not implemented")
}
func (UnimplementedExchangeRatesServer) ListRates(context.Context, *ListRatesRequest) (*ListRatesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRates not implemented")
}
func (UnimplementedExchangeRatesServer) Subscription(ExchangeRates_SubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscription not implemented")
}
func (UnimplementedExchangeRatesServer) mustEmbedUnimplementedExchangeRatesServer() {}

// UnsafeExchangeRatesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExchangeRatesServer will
// result in compilation errors.
type UnsafeExchangeRatesServer interface {
	mustEmbedUnimplementedExchangeRatesServer()
}

func RegisterExchangeRatesServer(s grpc.ServiceRegistrar, srv ExchangeRatesServer) {
	s.RegisterService(&ExchangeRates_ServiceDesc, srv)
}

func _ExchangeRates_GetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRatesServer).GetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange_rate.ExchangeRates/GetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRatesServer).GetRate(ctx, req.(*CurrencyRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRates_ListCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRatesServer).ListCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange_rate.ExchangeRates/ListCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRatesServer).ListCurrencies(ctx, req.(*ListCurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRates_ListRates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExchangeRatesServer).ListRates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/exchange_rate.ExchangeRates/ListRates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExchangeRatesServer).ListRates(ctx, req.(*ListRatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExchangeRates_Subscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ExchangeRatesServer).Subscription(&exchangeRatesSubscriptionServer{stream})
}

type ExchangeRates_SubscriptionServer interface {
	Send(*ListRatesResponse) error
	Recv() (*ListRatesRequest, error)
	grpc.ServerStream
}

type exchangeRatesSubscriptionServer struct {
	grpc.ServerStream
}

func (x *exchangeRatesSubscriptionServer) Send(m *ListRatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *exchangeRatesSubscriptionServer) Recv() (*ListRatesRequest, error) {
	m := new(ListRatesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ExchangeRates_ServiceDesc is the grpc.ServiceDesc for ExchangeRates service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExchangeRates_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "exchange_rate.ExchangeRates",
	HandlerType: (*ExchangeRatesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRate",
			Handler:    _ExchangeRates_GetRate_Handler,
		},
		{
			MethodName: "ListCurrencies",
			Handler:    _ExchangeRates_ListCurrencies_Handler,
		},
		{
			MethodName: "ListRates",
			Handler:    _ExchangeRates_ListRates_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscription",
			Handler:       _ExchangeRates_Subscription_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/exchange_rate.proto",
}
